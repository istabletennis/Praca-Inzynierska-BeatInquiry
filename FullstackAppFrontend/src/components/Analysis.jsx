import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from '../api/axiosConfig';
import { useAuth } from '../context/AuthContext';
import TopBar from './TopBar';
import '../styles/TopBar.css';
import '../styles/Analysis.css';

function Analysis() {
  const auth = useAuth();
  const navigate = useNavigate();

  const [imageUrl, setImageUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [startYear, setStartYear] = useState('');
  const [endYear, setEndYear] = useState('');
  const [analysisText, setAnalysisText] = useState('');
  const [selectedCollection, setSelectedCollection] = useState('');

  const collectionOptions = [
    { label: 'Real Songs', value: 'songs_data' },
    { label: 'Generated by GPT4', value: 'generated_songs_gpt4' },
    { label: 'Generated by GPT3.5', value: 'generated_songs_gpt35' },
    { label: 'Generated by Beat Inquiry', value: 'generated_songs_biv2' },
  ];

  const handleCollectionChange = (event) => {
    setSelectedCollection(event.target.value);
  };

  function handleDashboardNav() {
    navigate('/dashboard');
  }

  function handleLogout() {
    auth.logout();
    navigate('/');
  }


  useEffect(() => {
    if (!auth.user) {
      navigate('/');
    }
  }, [auth.user, navigate]);

  const handleButtonClick = () => {
    setLoading(true);
    setError(null);

    axios.post('/perform-analysis', {
        "start_year": startYear,
        "end_year": endYear,
        "collection_name": selectedCollection
    })
      .then(response => {
        setImageUrl(response.data.imageUrl);
        setAnalysisText(response.data.message);
        setLoading(false);
      })
      .catch(error => {
        setError(error.message);
        setLoading(false);
      });
  };

   if (!auth.user) {
    return null;
  }

  const buttons = [
      <button onClick={handleDashboardNav} className="nav-link">Generate</button>,
      <button onClick={handleLogout} className="nav-link">Logout</button>
  ];

  return (
    <div>
      <TopBar buttons={buttons}/>
      <div class="main">
      <div className="top">
              <div class="select-box">
        <h2>Perform Analysis</h2>
                </div>
        <div class="select-box">

        <input class="select" type="number" id="startYear" name="startYear" placeholder="Start Year" min="1950" max="2025"  step="5" value={startYear} onChange={e => setStartYear(e.target.value)} />
        </div>
                <div class="select-box">
        <input class="select" type="number" id="endYear" name="endYear" placeholder="End Year" min="1950" max="2025"  step="5" value={endYear} onChange={e => setEndYear(e.target.value)} />
        </div>
        <div class="select-box">
        <select class="select" style={{width: "240px"}} id="collection" value={selectedCollection} onChange={handleCollectionChange}>
        <option class="option" value="" disabled>collection</option>
        {collectionOptions.map((collectionOption) => (
          <option class="option" key={collectionOption.value} value={collectionOption.value}>
            {collectionOption.label}
          </option>
        ))}
        </select>
        </div>
                      <div class="select-box">
        <button class="analyze-button" onClick={handleButtonClick}>Analyze</button>
                </div>
      </div>
      <div className="container">
        <table class="left-analysis">
          <p> </p>
          {loading && <p>Loading...</p>}
          {error && <p>Error: {error}</p>}
          {imageUrl && <img style={{maxWidth: "95%"}} src={imageUrl} alt="Generated" />}
        </table>
        <table class="right-analysis">
          <p> </p>
          {loading && <p>Loading...</p>}
          {error && <p>Error: {error}</p>}
          <p style={{ whiteSpace: 'pre-wrap' }}>{analysisText}</p>
        </table>
      </div>
      </div>
    </div>
  );
}

export default Analysis;